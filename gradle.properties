# Gradle Properties
org.gradle.jvmargs = -Xmx3G

# Source Options
# Use Modern Java(9+) Syntax (Courtesy of Jabel)
use_modern_java_syntax = true
# Use Lombok annotation processor
use_lombok_ap = false
lombok_version = 1.18.38

# Compilation Options
generate_sources_jar = true
generate_javadocs_jar = false

# Testing
enable_junit_testing = true
show_testing_output = false

# Shadow
enable_shadow = false

# Mod Information
# HIGHLY RECOMMEND complying with SemVer for mod_version: https://semver.org/
mod_version = 1.0
root_package = com.fred
mod_id = rgbchat
mod_name = RGB Chat

# Mod Metadata (Optional)
mod_description = You can chat with other in RGB color now. Gradient text is also available to use.
mod_url =
mod_update_json =
# Delimit authors with commas
mod_authors = joy187,RuiXuqi
mod_credits = The Forge and FML guys, for making this example.\nKasumi_Nova for optimized font renderer, the core of the mod.
mod_logo_path =

# Run Configurations
# If multiple arguments/tweak classes are stated, use spaces as the delimiter
minecraft_username = Joy187
extra_jvm_args =
enable_foundation_debug = false

# Maven Publishing (Provide secret: MAVEN_USER, MAVEN_PASS)
publish_to_maven = false
# Good for debugging artifacts before uploading to remote maven
# GitHub actions won't run if this is true, test this by running the task `publishToMavenLocal`
publish_to_local_maven = false
maven_name = ${mod_name}
maven_url =

# If any properties changes below this line, refresh gradle again to ensure everything is working correctly.
# ----------------------------------------------------------------------------------------------------------------------

# Access Transformers
# A way to change visibility of Minecraft's classes, methods and fields
# An example access transformer file is given in the path: `src/main/resources/example_at.cfg`
# AT files should be in the root of src/main/resources with the filename formatted as: `mod_id_at.cfg`
# Use the property `access_transformer_locations` to state custom AT files if you aren't using the default `mod_id_at.cfg` location
# If multiple locations are stated, use spaces as the delimiter
# WARNING: Use MCP name in AT file. Unimined will remap it to srg name when building.
use_access_transformer = false
access_transformer_locations = ${mod_id}_at.cfg

# Mixins
# Powerful tool to do runtime description changes of classes
# Wiki: https://github.com/SpongePowered/Mixin/wiki + https://github.com/CleanroomMC/MixinBooter/ + https://cleanroommc.com/wiki/forge-mod-development/mixin/preface
# Only use mixins once you understand the underlying structure
use_mixins = false
mixin_booter_version = 10.6

# Coremods
# The most powerful way to change java classes at runtime, it is however very primitive with little documentation.
# Only make a coremod if you are absolutely sure of what you are doing
# Change the property `coremod_includes_mod` to false if your coremod doesn't have a @Mod annotation
# You MUST state a class name for `coremod_plugin_class_name` if you are making a coremod, the class should implement `IFMLLoadingPlugin`
is_coremod = false
coremod_includes_mod = true
coremod_plugin_class_name =

# AssetMover
# Convenient way to allow downloading of assets from official vanilla Minecraft servers, CurseForge, or any direct links
# Documentation: https://github.com/CleanroomMC/AssetMover
use_asset_mover = false
asset_mover_version = 2.5

# ConfigAnyTime
# Put the line below in the bottom of config class to use the feature
# static { ConfigAnytime.register(ConfigClass.class); }
use_config_any_time = false
config_any_time_version = 3.0
